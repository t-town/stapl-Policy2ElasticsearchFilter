hist(as.numeric(json2["totals"][[1]]),col=rgb(0,0,1,0.5),add=T)
f = file("results/50000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/50000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
xmin = min(min(json1["totals"][[1]]),min(json2["totals"][[1]]))
xmax = max(max(json1["totals"][[1]]),max(json2["totals"][[1]]))
hist(as.numeric(json1["totals"][[1]]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax))
hist(as.numeric(json2["totals"][[1]]),col=rgb(0,0,1,0.5),add=T)
filterResults$r50 <- json1
naiveResults$r50 <- json2
f = file("results/100000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/100000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
xmin = min(min(json1["totals"][[1]]),min(json2["totals"][[1]]))
xmax = max(max(json1["totals"][[1]]),max(json2["totals"][[1]]))
hist(as.numeric(json1["totals"][[1]]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax))
hist(as.numeric(json2["totals"][[1]]),col=rgb(0,0,1,0.5),add=T)
filterResults$r100 <- json1
naiveResults$r100 <- json2
#stacked representation
par(mfrow=c(1,2))
ymin = min(min(json1["totals"][[1]]),min(json2["totals"][[1]]))
ymax = max(max(json1["totals"][[1]]),max(json2["totals"][[1]]))
dd = t(data.matrix(data.frame(json1["otherDuration"][[1]][1:100], json1["serverDuration"][[1]][1:100])))
rownames(dd) <- c("Filter calculation","server calculation")
barplot(dd, col = c("blue","red"), legend = rownames(dd),ylim=c(ymin,ymax))
dd = t(data.matrix(data.frame(json2["otherDuration"][[1]][1:100], json2["serverDuration"][[1]][1:100])))
rownames(dd) <- c("Stapl calculation","server calculation")
barplot(dd, col = c("blue","red"), legend = rownames(dd),ylim = c(ymin,ymax))
values = c(5000,10000,50000.100000)
naiveMeans = c(naiveResults$r5,naiveResults$r10$mean, naiveResults$r100$mean)
filterResults <- list()
#Naive brute force results
naiveResults <- list()
f = file("results/5000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/5000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
filterResults$r5 <- json1
naiveResults$r5 <- json2
f = file("results/10000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/10000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
filterResults$r10 <- json1
naiveResults$r10 <- json2
f = file("results/50000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/50000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
#xmin = min(min(json1["totals"][[1]]),min(json2["totals"][[1]]))
#xmax = max(max(json1["totals"][[1]]),max(json2["totals"][[1]]))
#hist(as.numeric(json1["totals"][[1]]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax))
#hist(as.numeric(json2["totals"][[1]]),col=rgb(0,0,1,0.5),add=T)
filterResults$r50 <- json1
naiveResults$r50 <- json2
f = file("results/100000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/100000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
filterResults$r100 <- json1
naiveResults$r100 <- json2
#evolution:
values = c(5000,10000,50000.100000)
values = c(5000,10000,50000.100000)
naiveMeans = c(naiveResults$r5$mean,naiveResults$r10$mean,naiveResults$r50$mean,naiveResults$r100$mean)
filterMeans = c(filterResults$r5$mean,filterResults$r10$mean,filterResults$r50$mean,filterResults$r100$mean)
ymin = min(min(naiveMeans),min(filterMeans))
ymax = max(max(naiveMeans),max(filterMeans))
xmin = min(values)
xmax = max(values)
plot(values,naiveMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "# resources",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue")
axis(1,at=values,labels=values)
values = c(5000,10000,50000,100000)
xmin = min(values)
xmax = max(values)
plot(values,naiveMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "# resources",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue")
axis(1,at=values,labels=values)
par(new=T)
plot(values,filterMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
par(mfrow=c(1,1))
values = c(5000,10000,50000,100000)
naiveMeans = c(naiveResults$r5$mean,naiveResults$r10$mean,naiveResults$r50$mean,naiveResults$r100$mean)
filterMeans = c(filterResults$r5$mean,filterResults$r10$mean,filterResults$r50$mean,filterResults$r100$mean)
ymin = min(min(naiveMeans),min(filterMeans))
ymax = max(max(naiveMeans),max(filterMeans))
xmin = min(values)
xmax = max(values)
plot(values,naiveMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "# resources",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue")
axis(1,at=values,labels=values)
par(new=T)
plot(values,filterMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = 0, y= 600000, c("new implementation","naive implementation"),col = c("blue","red"))
legend(x = 0, y= 6000000, c("new implementation","naive implementation"),col = c("blue","red"))
legend(x = 10000, y= 6000000, c("new implementation","naive implementation"),col = c("blue","red"))
legend(x = 5000, y= 1000000, c("new implementation","naive implementation"),col = c("blue","red"))
legend(x = 5000, y= 10000000, c("new implementation","naive implementation"),col = c("blue","red"))
plot(values,naiveMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "# resources",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue")
axis(1,at=values,labels=values)
par(new=T)
plot(values,filterMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = 5000, y= 10000000, c("new implementation","naive implementation"),col = c("blue","red"))
legend(x = 5000, y= 10000000, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
mapf <- function(list) {
return(mean(list))
}
naiveServerMeans = c(naiveResults$r5$serverDuration,naiveResults$r10$serverDuration,naiveResults$r50$serverDuration,naiveResults$r100$serverDuration)
filterMeans = c(filterResults$r5$serverDuration,filterResults$r10$serverDuration,filterResults$r50$serverDuration,filterResults$r100$serverDuration)
filterServerMeans = Map(mapf, naiveServerMeans)
filterServerMeans = Map(mapf, filterServerMeans)
naiveServerMeans = c(naiveResults$r5$serverDuration,naiveResults$r10$serverDuration,naiveResults$r50$serverDuration,naiveResults$r100$serverDuration)
filterMeans = c(filterResults$r5$serverDuration,filterResults$r10$serverDuration,filterResults$r50$serverDuration,filterResults$r100$serverDuration)
naiveServerMeans = Map(mapf, naiveServerMeans)
filterServerMeans = Map(mapf, filterServerMeans)
plot(values,filterServerMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "# resources",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue")
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveServerMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
naiveServerMeans = c(naiveResults$r5$serverDuration,naiveResults$r10$serverDuration,naiveResults$r50$serverDuration,naiveResults$r100$serverDuration)
naiveServerMeans = c(naiveResults$r5$serverDuration,naiveResults$r10$serverDuration,naiveResults$r50$serverDuration,naiveResults$r100$serverDuration)
filterServerMeans = c(filterResults$r5$serverDuration,filterResults$r10$serverDuration,filterResults$r50$serverDuration,filterResults$r100$serverDuration)
naiveServerMeans = Map(mapf, naiveServerMeans)
filterServerMeans = Map(mapf, filterServerMeans)
naiveServerMeans = c(naiveResults$r5$serverDuration,naiveResults$r10$serverDuration,naiveResults$r50$serverDuration,naiveResults$r100$serverDuration)
naiveServerMeans = list(naiveResults$r5$serverDuration,naiveResults$r10$serverDuration,naiveResults$r50$serverDuration,naiveResults$r100$serverDuration)
naiveServerMeans = list(naiveResults$r5$serverDuration,naiveResults$r10$serverDuration,naiveResults$r50$serverDuration,naiveResults$r100$serverDuration)
filterServerMeans = list(filterResults$r5$serverDuration,filterResults$r10$serverDuration,filterResults$r50$serverDuration,filterResults$r100$serverDuration)
naiveServerMeans = Map(mapf, naiveServerMeans)
filterServerMeans = Map(mapf, filterServerMeans)
plot(values,filterServerMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "# resources",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue")
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveServerMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = 5000, y= 10000000, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
par(new=F)
plot(values,filterServerMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "# resources",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue")
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveServerMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = 5000, y= 10000000, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
plot(values,filterServerMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "Number of resources in database",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue",
main = "Server processing time to retrieve all allowable resources")
)
)
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveServerMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = 5000, y= 10000000, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
boxplot(filterServerMeans)
boxplot(naiveServerMeans)
boxplot(naiveServerMeans,new = False)
boxplot(naiveServerMeans,new = "false")
boxplot(filterServerMeans)
boxplot(naiveServerMeans,new = "false")
naiveServerValues = list(naiveResults$r5$serverDuration,naiveResults$r10$serverDuration,naiveResults$r50$serverDuration,naiveResults$r100$serverDuration)
filterServerValues = list(filterResults$r5$serverDuration,filterResults$r10$serverDuration,filterResults$r50$serverDuration,filterResults$r100$serverDuration)
naiveServerMeans = Map(mapf, naiveServerValues)
filterServerMeans = Map(mapf, filterServerValues)
boxplot(naiveServerValues)
boxplot(filterServerValues)
boxplot(filterServerMeans,main = "boxplot of server duration of new implementation",names = values)
boxplot(filterServerValues,main = "boxplot of server duration of new implementation",names = values)
boxplot(filterServerValues,main = "boxplot of server duration of new implementation",names = values, ylab = "time in microseconds", xlab = "number of resources in database")
values = c(5000,10000,50000,100000)
naiveValues = c(naiveResults$r5$mean,naiveResults$r10$mean,naiveResults$r50$mean,naiveResults$r100$mean)
fitlerValues = c(filterResults$r5$mean,filterResults$r10$mean,filterResults$r50$mean,filterResults$r100$mean)
mapf <- function(list) {
return(mean(list))
}
naiveMeans = Map(mapf,naiveValues)
fiterMeans = Map(mapf,filterValues)
filterValues = c(filterResults$r5$mean,filterResults$r10$mean,filterResults$r50$mean,filterResults$r100$mean)
mapf <- function(list) {
return(mean(list))
}
naiveMeans = Map(mapf,naiveValues)
fiterMeans = Map(mapf,filterValues)
filterMeans = Map(mapf,filterValues)
ymin = min(min(naiveMeans),min(filterMeans))
naiveMeans = unlist(Map(mapf,naiveValues))
filterMeans = unlist(Map(mapf,filterValues))
ymin = min(min(naiveMeans),min(filterMeans))
ymax = max(max(naiveMeans),max(filterMeans))
xmin = min(values)
xmax = max(values)
#means
plot(values,filterMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "number of resources in database",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue",
main = "Total processing time to retrieve all allowable resources")
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = 5000, y= 10000000, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
mapf <- function(list) {
return(mean(list))
}
naiveServerValues = list(naiveResults$r5$serverDuration,naiveResults$r10$serverDuration,naiveResults$r50$serverDuration,naiveResults$r100$serverDuration)
filterServerValues = list(filterResults$r5$serverDuration,filterResults$r10$serverDuration,filterResults$r50$serverDuration,filterResults$r100$serverDuration)
naiveServerMeans = unlist(Map(mapf, naiveServerValues))
filterServerMeans = unlist(Map(mapf, filterServerValues))
plot(values,filterServerMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "Number of resources in database",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue",
main = "Elasticsearch processing time to retrieve all allowable resources"
)
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveServerMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
mapf <- function(list) {
return(mean(list))
}
naiveServerValues = list(naiveResults$r5$serverDuration,naiveResults$r10$serverDuration,naiveResults$r50$serverDuration,naiveResults$r100$serverDuration)
filterServerValues = list(filterResults$r5$serverDuration,filterResults$r10$serverDuration,filterResults$r50$serverDuration,filterResults$r100$serverDuration)
naiveServerMeans = unlist(Map(mapf, naiveServerValues))
filterServerMeans = unlist(Map(mapf, filterServerValues))
ymin = min(min(naiveServerMeans),min(filterServerMeans))
ymax = max(max(naiveServerMeans),max(filterServerMeans))
xmin = min(values)
xmax = max(values)
plot(values,filterServerMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "Number of resources in database",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue",
main = "Elasticsearch processing time to retrieve all allowable resources"
)
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveServerMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = 5000, y= 10000000, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = xmin, y= ymax, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
boxplot(filterServerValues,main = "boxplot of server duration of new implementation",names = values, ylab = "time in microseconds", xlab = "number of resources in database",col = "blue")
boxplot(naiveServerValues,main = "boxplot of server duration of new implementation",names = values, ylab = "time in microseconds", xlab = "number of resources in database",col = "red", add = T)
boxplot(naiveServerValues,main = "boxplot of server duration of new implementation",names = values, ylab = "time in microseconds", xlab = "number of resources in database",col = "red")#, #add = T)
boxplot(filterServerValues,main = "boxplot of server duration of new implementation",names = values, ylab = "time in microseconds", xlab = "number of resources in database",col = "blue")
boxplot(naiveServerValues,main = "boxplot of server duration of naive implementation",names = values, ylab = "time in microseconds", xlab = "number of resources in database",col = "red")#, #add = T)
hist(naiveValues,col = rgb(1,0,0,0.5),xlim=c(xmin,xmax))
xmin = min(min(naiveValues),min(filterValues))
xmax = max(max(naiveValues),max(filterValues))
hist(naiveValues,col = rgb(1,0,0,0.5),xlim=c(xmin,xmax))
xmin = min(min(naiveValues[end]),min(filterValues[end]))
xmin = min(min(naiveValues[end(naiveValues)]),min(filterValues[end]))
naiveValues = c(naiveResults$r5$mean,naiveResults$r10$mean,naiveResults$r50$mean,naiveResults$r100$mean)
warnings()
naiveValues = c(naiveResults$r5$totals,naiveResults$r10$totals,naiveResults$r50$totals,naiveResults$r100$totals)
filterValues = c(filterResults$r5$totals,filterResults$r10$totals,filterResults$r50$totals,filterResults$r100$totals)
mapf <- function(list) {
return(mean(list))
}
naiveMeans = unlist(Map(mapf,naiveValues))
filterMeans = unlist(Map(mapf,filterValues))
ymin = min(min(naiveMeans),min(filterMeans))
ymax = max(max(naiveMeans),max(filterMeans))
xmin = min(values)
xmax = max(values)
#means
plot(values,filterMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "number of resources in database",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue",
main = "Total processing time to retrieve all allowable resources")
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = xmin, y= ymax, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
naiveMeans = unlist(Map(mapf,naiveValues))
naiveValues = list(naiveResults$r5$totals,naiveResults$r10$totals,naiveResults$r50$totals,naiveResults$r100$totals)
filterValues = list(filterResults$r5$totals,filterResults$r10$totals,filterResults$r50$totals,filterResults$r100$totals)
mapf <- function(list) {
return(mean(list))
}
naiveMeans = unlist(Map(mapf,naiveValues))
filterMeans = unlist(Map(mapf,filterValues))
ymin = min(min(naiveMeans),min(filterMeans))
ymax = max(max(naiveMeans),max(filterMeans))
xmin = min(values)
xmax = max(values)
#means
plot(values,filterMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "number of resources in database",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue",
main = "Total processing time to retrieve all allowable resources")
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = xmin, y= ymax, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
xmin = min(min(naiveValues),min(filterValues[end]))
xmin = min(min(naiveValues[2]),min(filterValues[2]))
xmin = min(min(unlist(naiveValues[2])),min(unlist(filterValues[2]))
xmin = min(min(unlist(naiveValues[2])),min(unlist(filterValues[2])))
xmin = min(min(unlist(naiveValues[2])),min(unlist(filterValues[2])))
xmax = max(max(unlist(naiveValues[2])),max(unlist(filterValues[2])))
hist(unlist(naiveValues[2]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax))
hist(unlist(naiveValues[2]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax))
hist(unlist(filterValues[2]),col=rgb(0,0,1,0.5),add=T)
hist(unlist(naiveValues[2]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax), xlab = "processing time in microseconds")
hist(unlist(filterValues[2]),col=rgb(0,0,1,0.5),add=T)
hist(unlist(naiveValues[2]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax), xlab = "processing time in microseconds", main = "histogram of total processing time to retrieve all allowable resources")
hist(unlist(filterValues[2]),col=rgb(0,0,1,0.5),add=T)
legend(x = xmin, y= ymax, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = xmin, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = 0,y = 0 c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = 0,y = 0,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = 0,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
hist(unlist(naiveValues[2]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax), xlab = "processing time in microseconds", main = "histogram of total processing time to retrieve all allowable resources")
hist(unlist(filterValues[2]),col=rgb(0,0,1,0.5),add=T)
legend(x = 0,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = xmax,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = xmax-xmin,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = xmax*0.9,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = xmax*0.9,y=0,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = xmax*0.7,y=0,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = xmax*0.7,y=100,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = xmax*0.7,y=300,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
legend(x = xmax*0.75,y=300,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
hist(unlist(naiveValues[2]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax), xlab = "processing time in microseconds", main = "histogram of total processing time to retrieve all allowable resources")
hist(unlist(filterValues[2]),col=rgb(0,0,1,0.5),add=T)
legend(x = xmax*0.75,y=300,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
xmin = min(min(unlist(naiveServerValues[2])),min(unlist(filterServerValues[2])))
xmax = max(max(unlist(naiveServerValues[2])),max(unlist(filterServerValues[2])))
hist(unlist(naiveServerValues[2]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax), xlab = "processing time in microseconds", main = "histogram of total processing time to retrieve all allowable resources")
hist(unlist(filterServerValues[2]),col=rgb(0,0,1,0.5),add=T)
legend(x = xmax*0.75,y=300,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
xmin = min(min(unlist(naiveServerValues[1])),min(unlist(filterServerValues[1])))
xmax = max(max(unlist(naiveServerValues[1])),max(unlist(filterServerValues[1])))
hist(unlist(naiveServerValues[1]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax), xlab = "processing time in microseconds", main = "histogram of total processing time to retrieve all allowable resources")
hist(unlist(filterServerValues[1]),col=rgb(0,0,1,0.5),add=T)
xmin = min(min(unlist(naiveServerValues[1])),min(unlist(filterServerValues[1])))
xmax = max(max(unlist(naiveServerValues[1])),max(unlist(filterServerValues[1])))
hist(unlist(naiveServerValues[1]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax), xlab = "processing time in microseconds", main = "histogram of total processing time to retrieve all allowable resources")
hist(unlist(filterServerValues[1]),col=rgb(0,0,1,0.5),add=T)
naiveServerValues[0]
naiveServerValues[1]
xmin = min(min(unlist(naiveServerValues[2])),min(unlist(filterServerValues[2])))
xmax = max(max(unlist(naiveServerValues[2])),max(unlist(filterServerValues[2])))
hist(unlist(naiveServerValues[2]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax), xlab = "processing time in microseconds", main = "histogram of total processing time to retrieve all allowable resources")
hist(unlist(filterServerValues[2]),col=rgb(0,0,1,0.5),add=T)
legend(x = xmax*0.75,y=300,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
hist(unlist(naiveServerValues[2]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax), xlab = "processing time in microseconds", main = "histogram of Elasticsearch processing time to retrieve all allowable resources")
hist(unlist(filterServerValues[2]),col=rgb(0,0,1,0.5),add=T)
legend(x = xmax*0.75,y=300,c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
boxplot(filterValues,main = "boxplot of total duration of new implementation",names = values, ylab = "time in microseconds", xlab = "number of resources in database",col = "blue")
boxplot(naiveValues,main = "boxplot of total duration of naive implementation",names = values, ylab = "time in microseconds", xlab = "number of resources in database",col = "red")#, #add = T)
library(RJSONIO)
options(scipen=5)
#/** for the increasing number of arguments**/
f = file("results/many/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/many/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
mapf <- function(lst) {
return(lst["mean"][[1]])
}
means1 = unlist(Map(mapf,json1))
json1[1]
json1[1]["values"]
json1[1]["totals"]
json1[1]["total"]
json1[1]["totals"]
json1[1]
json1[1]$totals
json1[$totals
json1$totals
json1[[1]]$totals
mapf <- function(lst) {
return(mean(lst["totals"][[1]]))
}
means1 = unlist(Map(mapf,json1))
means2 = unlist(Map(mapf,json2))
ymin = min(min(means1),min(means2))
ymax = max(max(means1),max(means2))
#1 million micro seconds = 1 second
plot(1:50,means1,ylim=c(ymin,ymax),type="p",col="blue",xlab = "# arguments", ylab = "time in μs to handle 10000 documents", main = "Increasing amount of resource attributes")
par(new=T)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),axes = False)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),axes = F)
plot(1:50,means1,ylim=c(ymin,ymax),type="p",col="blue",xlab = "# arguments", ylab = "time in μs to handle 10000 documents", main = "Increasing amount of resource attributes")
par(new=T)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),axes = F)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),axt = F)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),axt = no)
plot(1:50,means1,ylim=c(ymin,ymax),type="p",col="blue",xlab = "# arguments", ylab = "time in μs to handle 10000 documents", main = "Increasing amount of resource attributes")
par(new=T)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),axt = no)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),yaxt = no)
plot(1:50,means1,ylim=c(ymin,ymax),type="p",col="blue",xlab = "# arguments", ylab = "time in μs to handle 10000 documents", main = "Increasing amount of resource attributes")
par(new=T)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),yaxt = '', xaxt = '')
plot(1:50,means2,col="red",ylim=c(ymin,ymax),yaxt = F, xaxt = '')
plot(1:50,means2,col="red",ylim=c(ymin,ymax),yaxt = "", xaxt = "")
plot(1:50,means1,ylim=c(ymin,ymax),type="p",col="blue",xlab = "# arguments", ylab = "time in μs to handle 10000 documents", main = "Increasing amount of resource attributes")
par(new=T)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),xlab = '', ylab = '',xaxt = "no", yaxt = "no")
plot(1:50,means1,ylim=c(ymin,ymax),type="p",col="blue",xlab = "# arguments", ylab = "time in microseconds to handle 10000 documents", main = "Increasing amount of resource attributes")
par(new=T)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),xlab = '', ylab = '',xaxt = "no", yaxt = "no")
par(xpd=TRUE)
legend(x=20,y=500000,c("new implementation","naive implementation"),col = c("blue","red"),pch="o")
legend(x=40,y=ymin*2,c("new implementation","naive implementation"),col = c("blue","red"),pch="o")
legend(x=35,y=ymin*2,c("new implementation","naive implementation"),col = c("blue","red"),pch="o")
legend(x=35,y=ymin*4,c("new implementation","naive implementation"),col = c("blue","red"),pch="o")
legend(x=35,y=ymin*3,c("new implementation","naive implementation"),col = c("blue","red"),pch="o")
plot(1:50,means1,ylim=c(ymin,ymax),type="p",col="blue",xlab = "# arguments", ylab = "time in microseconds to handle 10000 documents", main = "Increasing amount of resource attributes")
par(new=T)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),xlab = '', ylab = '',xaxt = "no", yaxt = "no")
par(xpd=TRUE)
legend(x=35,y=ymin*3,c("new implementation","naive implementation"),col = c("blue","red"),pch="o")
