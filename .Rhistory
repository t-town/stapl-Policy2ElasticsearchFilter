library(RJSONIO)
options(scipen=5)
setwd("~/Dropbox/Developer/thesis-scala/Policy2Filter")
#/** for the increasing number of arguments**/
f = file("results/many/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/many/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
mapf <- function(lst) {
return(mean(lst["totals"][[1]]))
}
means1 = unlist(Map(mapf,json1))
means2 = unlist(Map(mapf,json2))
ymin = min(min(means1),min(means2))
ymax = max(max(means1),max(means2))
#1 million micro seconds = 1 second
plot(1:50,means1,ylim=c(ymin,ymax),type="p",col="blue",xlab = "# arguments", ylab = "time in microseconds to handle 10000 documents", main = "Increasing amount of resource attributes")
par(new=T)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),xlab = '', ylab = '',xaxt = "no", yaxt = "no")
par(xpd=TRUE)
legend(x=35,y=ymin*3,c("new implementation","naive implementation"),col = c("blue","red"),pch="o")
filterResults <- list()
#Naive brute force results
naiveResults <- list()
f = file("results/5000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/5000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
filterResults$r5 <- json1
naiveResults$r5 <- json2
f = file("results/10000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/10000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
filterResults$r10 <- json1
naiveResults$r10 <- json2
f = file("results/50000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/50000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
#xmin = min(min(json1["totals"][[1]]),min(json2["totals"][[1]]))
#xmax = max(max(json1["totals"][[1]]),max(json2["totals"][[1]]))
#hist(as.numeric(json1["totals"][[1]]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax))
#hist(as.numeric(json2["totals"][[1]]),col=rgb(0,0,1,0.5),add=T)
filterResults$r50 <- json1
naiveResults$r50 <- json2
f = file("results/100000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/100000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
filterResults$r100 <- json1
naiveResults$r100 <- json2
#evolution:
par(mfrow=c(1,1))
values = c(5000,10000,50000,100000)
naiveValues = list(naiveResults$r5$totals,naiveResults$r10$totals,naiveResults$r50$totals,naiveResults$r100$totals)
filterValues = list(filterResults$r5$totals,filterResults$r10$totals,filterResults$r50$totals,filterResults$r100$totals)
mapf <- function(list) {
return(mean(list))
}
naiveMeans = unlist(Map(mapf,naiveValues))
filterMeans = unlist(Map(mapf,filterValues))
ymin = min(min(naiveMeans),min(filterMeans))
ymax = max(max(naiveMeans),max(filterMeans))
xmin = min(values)
xmax = max(values)
#means
plot(values,filterMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "number of resources in database",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue",
main = "Total processing time to retrieve all allowable resources")
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = xmin, y= ymax, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
mapf <- function(list) {
return(mean(list))
}
naiveServerValues = list(naiveResults$r5$serverDuration,naiveResults$r10$serverDuration,naiveResults$r50$serverDuration,naiveResults$r100$serverDuration)
filterServerValues = list(filterResults$r5$serverDuration,filterResults$r10$serverDuration,filterResults$r50$serverDuration,filterResults$r100$serverDuration)
naiveServerMeans = unlist(Map(mapf, naiveServerValues))
filterServerMeans = unlist(Map(mapf, filterServerValues))
ymin = min(min(naiveServerMeans),min(filterServerMeans))
ymax = max(max(naiveServerMeans),max(filterServerMeans))
xmin = min(values)
xmax = max(values)
plot(values,filterServerMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "Number of resources in database",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue",
main = "Elasticsearch processing time to retrieve all allowable resources"
)
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveServerMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = xmin, y= ymax, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
library(RJSONIO)
options(scipen=5)
#/** for the increasing number of arguments**/
f = file("results/many/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/many/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
mapf <- function(lst) {
return(mean(lst["totals"][[1]]))
}
means1 = unlist(Map(mapf,json1))
means2 = unlist(Map(mapf,json2))
ymin = min(min(means1),min(means2))
ymax = max(max(means1),max(means2))
#1 million micro seconds = 1 second
plot(1:50,means1,ylim=c(ymin,ymax),type="p",col="blue",xlab = "# arguments", ylab = "time in microseconds", main = "Increasing amount of resource attributes",sub = "Processing 10000 documents")
par(new=T)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),xlab = '', ylab = '',xaxt = "no", yaxt = "no")
par(xpd=TRUE)
legend(x=35,y=ymin*3,c("new implementation","naive implementation"),col = c("blue","red"),pch="o")
#for the increasing number of documents
#Results with filter:
filterResults <- list()
#Naive brute force results
naiveResults <- list()
f = file("results/5000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
json2 <- fromJSON(f)
f = file("results/5000/OriginalOutput.dat")
close(f)
filterResults$r5 <- json1
naiveResults$r5 <- json2
f = file("results/10000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/10000/OriginalOutput.dat")
filterResults$r10 <- json1
json2 <- fromJSON(f)
close(f)
naiveResults$r10 <- json2
f = file("results/50000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/50000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
#xmin = min(min(json1["totals"][[1]]),min(json2["totals"][[1]]))
#hist(as.numeric(json1["totals"][[1]]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax))
#xmax = max(max(json1["totals"][[1]]),max(json2["totals"][[1]]))
#hist(as.numeric(json2["totals"][[1]]),col=rgb(0,0,1,0.5),add=T)
filterResults$r50 <- json1
naiveResults$r50 <- json2
f = file("results/100000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/100000/OriginalOutput.dat")
json2 <- fromJSON(f)
naiveResults$r100 <- json2
filterResults$r100 <- json1
close(f)
#evolution:
par(mfrow=c(1,1))
values = c(5000,10000,50000,100000)
naiveValues = list(naiveResults$r5$totals,naiveResults$r10$totals,naiveResults$r50$totals,naiveResults$r100$totals)
filterValues = list(filterResults$r5$totals,filterResults$r10$totals,filterResults$r50$totals,filterResults$r100$totals)
mapf <- function(list) {
return(mean(list))
}
naiveMeans = unlist(Map(mapf,naiveValues))
filterMeans = unlist(Map(mapf,filterValues))
xmin = min(values)
ymax = max(max(naiveMeans),max(filterMeans))
ymin = min(min(naiveMeans),min(filterMeans))
xmax = max(values)
#means
plot(values,filterMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "number of resources in database",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue",
main = "Total processing time to retrieve all allowable resources")
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = xmin, y= ymax, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
boxplot(filterValues,main = "boxplot of total duration of new implementation",names = values, ylab = "time in microseconds", xlab = "number of resources in database",col = "blue")
boxplot(naiveValues,main = "boxplot of total duration of naive implementation",names = values, ylab = "time in microseconds", xlab = "number of resources in database",col = "red")#, #add = T)
par(mfrow=c(1,1))
values = c(5000,10000,50000,100000)
naiveValues = list(naiveResults$r5$totals,naiveResults$r10$totals,naiveResults$r50$totals,naiveResults$r100$totals)
filterValues = list(filterResults$r5$totals,filterResults$r10$totals,filterResults$r50$totals,filterResults$r100$totals)
mapf <- function(list) {
return(mean(list))
}
naiveMeans = unlist(Map(mapf,naiveValues))
filterMeans = unlist(Map(mapf,filterValues))
naiveValues
f = file("results/5000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/5000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
filterResults$r5 <- json1
naiveResults$r5 <- json2
par(mfrow=c(1,1))
values = c(5000,10000,50000,100000)
naiveValues = list(naiveResults$r5$totals,naiveResults$r10$totals,naiveResults$r50$totals,naiveResults$r100$totals)
filterValues = list(filterResults$r5$totals,filterResults$r10$totals,filterResults$r50$totals,filterResults$r100$totals)
mapf <- function(list) {
return(mean(list))
}
naiveMeans = unlist(Map(mapf,naiveValues))
filterMeans = unlist(Map(mapf,filterValues))
ymin = min(min(naiveMeans),min(filterMeans))
ymax = max(max(naiveMeans),max(filterMeans))
xmin = min(values)
xmax = max(values)
#means
plot(values,filterMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "number of resources in database",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue",
main = "Total processing time to retrieve all allowable resources")
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = xmin, y= ymax, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
library(RJSONIO)
options(scipen=5)
#/** for the increasing number of arguments**/
f = file("results/many/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/many/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
mapf <- function(lst) {
return(mean(lst["totals"][[1]]))
}
means1 = unlist(Map(mapf,json1))
means2 = unlist(Map(mapf,json2))
ymin = min(min(means1),min(means2))
ymax = max(max(means1),max(means2))
#1 million micro seconds = 1 second
plot(1:50,means1,ylim=c(ymin,ymax),type="p",col="blue",xlab = "# arguments", ylab = "time in microseconds", main = "Increasing amount of resource attributes",sub = "Processing 10000 documents")
par(new=T)
plot(1:50,means2,col="red",ylim=c(ymin,ymax),xlab = '', ylab = '',xaxt = "no", yaxt = "no")
par(xpd=TRUE)
legend(x=35,y=ymin*3,c("new implementation","naive implementation"),col = c("blue","red"),pch="o")
#for the increasing number of documents
#Results with filter:
filterResults <- list()
#Naive brute force results
naiveResults <- list()
f = file("results/5000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/5000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
filterResults$r5 <- json1
naiveResults$r5 <- json2
f = file("results/10000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/10000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
filterResults$r10 <- json1
naiveResults$r10 <- json2
f = file("results/50000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/50000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
#xmin = min(min(json1["totals"][[1]]),min(json2["totals"][[1]]))
#xmax = max(max(json1["totals"][[1]]),max(json2["totals"][[1]]))
#hist(as.numeric(json1["totals"][[1]]),col = rgb(1,0,0,0.5),xlim=c(xmin,xmax))
#hist(as.numeric(json2["totals"][[1]]),col=rgb(0,0,1,0.5),add=T)
filterResults$r50 <- json1
naiveResults$r50 <- json2
f = file("results/100000/FilterOutput.dat")
json1 <- fromJSON(f)
close(f)
f = file("results/100000/OriginalOutput.dat")
json2 <- fromJSON(f)
close(f)
filterResults$r100 <- json1
naiveResults$r100 <- json2
#evolution:
par(mfrow=c(1,1))
values = c(5000,10000,50000,100000)
naiveValues = list(naiveResults$r5$totals,naiveResults$r10$totals,naiveResults$r50$totals,naiveResults$r100$totals)
filterValues = list(filterResults$r5$totals,filterResults$r10$totals,filterResults$r50$totals,filterResults$r100$totals)
mapf <- function(list) {
return(mean(list))
}
naiveMeans = unlist(Map(mapf,naiveValues))
filterMeans = unlist(Map(mapf,filterValues))
ymin = min(min(naiveMeans),min(filterMeans))
ymax = max(max(naiveMeans),max(filterMeans))
xmin = min(values)
xmax = max(values)
#means
plot(values,filterMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "number of resources in database",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue",
main = "Total processing time to retrieve all allowable resources")
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = xmin, y= ymax, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
mapf <- function(list) {
return(mean(list))
}
naiveServerValues = list(naiveResults$r5$serverDuration,naiveResults$r10$serverDuration,naiveResults$r50$serverDuration,naiveResults$r100$serverDuration)
filterServerValues = list(filterResults$r5$serverDuration,filterResults$r10$serverDuration,filterResults$r50$serverDuration,filterResults$r100$serverDuration)
naiveServerMeans = unlist(Map(mapf, naiveServerValues))
filterServerMeans = unlist(Map(mapf, filterServerValues))
ymin = min(min(naiveServerMeans),min(filterServerMeans))
ymax = max(max(naiveServerMeans),max(filterServerMeans))
xmin = min(values)
xmax = max(values)
plot(values,filterServerMeans,
xlim = c(xmin,xmax),
ylim = c(ymin,ymax),
xlab = "Number of resources in database",
ylab = "time in microseconds",
type="l",
xaxt="n",
col = "blue",
main = "Elasticsearch processing time to retrieve all allowable resources"
)
axis(1,at=values,labels=values)
par(new=T)
plot(values,naiveServerMeans, xlim = c(xmin,xmax), ylim = c(ymin,ymax), xlab = '', ylab = '',type='l', xaxt = "no", yaxt = "no", col = "red")
par(new=F)
legend(x = xmin, y= ymax, c("new implementation","naive implementation"),col = c("blue","red"),lty = c(1,1))
par(mfrow=c(1,1))
values = c(5000,10000,50000,100000)
naiveValues = list(naiveResults$r5$totals,naiveResults$r10$totals,naiveResults$r50$totals,naiveResults$r100$totals)
filterValues = list(filterResults$r5$totals,filterResults$r10$totals,filterResults$r50$totals,filterResults$r100$totals)
mapf <- function(list) {
return(mean(list))
}
naiveMeans = unlist(Map(mapf,naiveValues))
filterMeans = unlist(Map(mapf,filterValues))
ymin = min(min(naiveMeans),min(filterMeans))
ymax = max(max(naiveMeans),max(filterMeans))
xmin = min(values)
xmax = max(values)
#means
boxplot(filterValues,main = "boxplot of total duration of new implementation",names = values, ylab = "time in microseconds", xlab = "number of resources in database",col = "blue")
boxplot(naiveValues,main = "boxplot of total duration of naive implementation",names = values, ylab = "time in microseconds", xlab = "number of resources in database",col = "red")#, #add = T)
