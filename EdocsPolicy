	subject.organization_id = SimpleAttribute(String)			
	subject.department = SimpleAttribute(String)				
	subject.assigned_organizations = ListAttribute(String) 
	subject.role = SimpleAttribute(String)
	subject.supervisees = ListAttribute(String)
	resource.creator = SimpleAttribute(String)
	resource.origin = SimpleAttribute(String)	
	resource.destination = SimpleAttribute(String)					
	resource.type = SimpleAttribute(String)
	resource.destination_organization = SimpleAttribute(String)
	resource.confidential = SimpleAttribute(Number)
	action.id = SimpleAttribute(String)

	Policy("Docs Policy") := when (action.id === "view") apply FirstApplicable to (
		Policy("admin") := when (subject.role === "admin") apply FirstApplicable to (
			Policy("not sensitive") := when (resource.confidential gt 5) apply PermitOverrides to (
				Rule("default deny") := deny
			),
			Rule("not org1") := deny iff (resource.origin === "1"),
			Rule("permit") := permit
		),
		Policy("manager") := when (subject.role === "manager") apply PermitOverrides to (
			Rule("creator") := permit iff (resource.creator === subject.id),
			Rule("addressed") := permit iff (resource.destination === subject.id),
			Rule("addressed organization") := permit iff (resource.destination_organization === subject.organization_id),
			Rule("addressed organization is assigned") := permit iff (resource.destination_organization in subject.assigned_organizations),
			Rule("supervised creator") := permit iff (resource.creator in subject.supervisees),
			Rule("deny") := deny
		),
		Policy("employee") := when (subject.role === "employee") apply FirstApplicable to (
			Policy("not sensitive") := when ((resource.confidential gteq 1)) apply PermitOverrides to (
				Rule("default deny") := deny
			),
			Policy("department") := when (subject.department === "accounting") apply DenyOverrides to (
				Rule("no contracts") := deny iff (resource.type === "contract"),
				Rule("permit") := permit
			),
			Rule("creator") := permit iff (resource.creator === subject.id),
			Rule("addressed") := permit iff (resource.destination === subject.id),
			Rule("deny") := deny
		),
		Rule("deny") := deny
	)
		
	
